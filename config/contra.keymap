#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT  0
#define NUM_MODS 1
#define BT_CTRL  2
#define FACTORIO_LAYER  3

#define CE 2
#define CR 3
#define CT 4
#define CU 6
#define CI 7
#define CO 8
#define CP 9
#define CD 12
#define CF 13
#define CG 14
#define CH 15
#define CJ 16
#define CK 17
#define CC 22
#define CV 23
#define CM 26
#define CCOMMA 27

#define QUICK_TAP_MS 150

&lt {
    quick_tap_ms = <QUICK_TAP_MS>;
};

&mt {
    quick_tap_ms = <QUICK_TAP_MS>;
};

/ {
    macros {
        ZMK_MACRO(enie_lower,
            wait-ms = <20>;
            tap-ms = <20>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N1>
                , <&macro_release &kp LALT>
                ;
        )
        ZMK_MACRO(enie_upper,
            wait-ms = <20>;
            tap-ms = <20>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N9>
                , <&macro_release &kp LALT>
                ;
        )
        ZMK_MACRO(at_at,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&kp AT &kp AT>
                ;
        )
    };

    combos {
        compatible = "zmk,combos";
        combo_at {
            timeout-ms = <50>;
            key-positions = <CD CF>; // KP: D F
            bindings = <&kp AT>;
            layers = <DEFAULT>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <CJ CK>; // KP: J K
            bindings = <&kp TAB>;
            layers = <DEFAULT>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <CD CV>; // KP: D V
            bindings = <&kp LPAR>;
            layers = <DEFAULT>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <CK CM>; // KP: K M
            bindings = <&kp RPAR>;
            layers = <DEFAULT>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <CE CF>; // KP: E F
            bindings = <&mt UNDER MINUS>;
            layers = <DEFAULT>;
        };
        combo_amps {
            timeout-ms = <50>;
            key-positions = <CF CJ>; // KP: F J
            bindings = <&kp AMPS>;
            layers = <DEFAULT>;
        };
        combo_EXCL {
            timeout-ms = <50>;
            key-positions = <CG CH>; // KP: G H
            bindings = <&kp EXCL>;
            layers = <DEFAULT>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <CI CJ>; // KP: I J
            bindings = <&mt PLUS EQUAL>;
            layers = <DEFAULT>;
        };
        combo_dollar {
            timeout-ms = <50>;
            key-positions = <CE CR>;
            bindings = <&kp DLLR>; // KP: E R
            layers = <DEFAULT>;
        };
        combo_percent {
            timeout-ms = <50>;
            key-positions = <CU CI>; // KP: U I
            bindings = <&kp PRCNT>;
            layers = <DEFAULT>;
        };
        combo_grave {
            timeout-ms = <50>;
            key-positions = <CM CCOMMA>; // KP: M ,
            bindings = <&mt TILDE GRAVE>;
            layers = <DEFAULT>;
        };
        combo_pipe {
            timeout-ms = <50>;
            key-positions = <CC CV>; // KP: C V
            bindings = <&mt BSLH PIPE>;
            layers = <DEFAULT>;
        };
        combo_lbkt2 {
            timeout-ms = <50>;
            key-positions = <CD CG>; // KP: D G
            bindings = <&mt LBRC LBKT>;
            layers = <DEFAULT>;
        };
        combo_rbkt2 {
            timeout-ms = <50>;
            key-positions = <CH CK>; // KP: H K
            bindings = <&mt RBRC RBKT>;
            layers = <DEFAULT>;
        };
        combo_under {
            timeout-ms = <50>;
            key-positions = <CR CD>; // KP: R D
            bindings = <&kp UNDER>;
            layers = <DEFAULT>;
        };
        combo_plus {
            timeout-ms = <50>;
            key-positions = <CU CK>; // KP: U K
            bindings = <&kp PLUS>;
            layers = <DEFAULT>;
        };
        combo_hash {
            timeout-ms = <50>;
            key-positions = <CR CJ>; // KP: R J
            bindings = <&kp HASH>;
            layers = <DEFAULT>;
        };
        combo_star {
            timeout-ms = <50>;
            key-positions = <CU CF>; // KP: U F
            bindings = <&kp STAR>;
            layers = <DEFAULT>;
        };

        combo_at_at {
            timeout-ms = <50>;
            key-positions = <CD CF>; // KP: D F
            bindings = <&at_at>;
            layers = <NUM_MODS>;
        };
         combo_esc {           
            timeout-ms = <50>;
            key-positions = <CD CT>; // KP: D T
            bindings = <&mt LSHIFT ESC>;
            layers = <DEFAULT>;
        };
        combo_default_layer {           
            timeout-ms = <50>;
            key-positions = <CU CI CO CP>; // KP: U I O P
            bindings = <&to DEFAULT>;
        };
        combo_factorio_tab {
            timeout-ms = <100>;
            key-positions = <CD CF>; // KP: D F
            bindings = <&kp TAB>;
            layers = <FACTORIO_LAYER>;
        };
        combo_factorio_esc {
            timeout-ms = <100>;
            key-positions = <CE CR>; // KP: E R
            bindings = <&kp ESC>;
            layers = <FACTORIO_LAYER>;
        };
    };

    behaviors {
            hm: homerow_mods {
                    compatible = "zmk,behavior-hold-tap";
                    label = "HOMEROW_MODS";
                    #binding-cells = <2>;
                    tapping-term-ms = <250>;
                    quick-tap-ms = <QUICK_TAP_MS>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
            };
            hl: homerow_layers {
                    compatible = "zmk,behavior-hold-tap";
                    label = "HOMEROW_LAYERS";
                    #binding-cells = <2>;
                    tapping-term-ms = <150>;
                    quick-tap-ms = <QUICK_TAP_MS>;
                    flavor = "tap-preferred";
                    bindings = <&mo>, <&kp>;
            };
            tabspace: tab_space  {
                    compatible = "zmk,behavior-mod-morph";
                    label = "TAB_SPACE";
                    #binding-cells = <0>;
                    bindings = <&mt LSHIFT SPACE>, <&kp TAB>;
                    mods = <(MOD_LALT | MOD_RALT)>;
            };
            enie: enie  {
                    compatible = "zmk,behavior-mod-morph";
                    label = "ENIE";
                    #binding-cells = <0>;
                    bindings = <&enie_lower>, <&enie_upper>;
                    mods = <(MOD_LSFT | MOD_RSFT)>;
            };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |   ESC   |    Q    |    W    |    E    |    R    |    T    |    Y    |    U    |    I    |    O    |    P    |    \    |
// |   TAB   |    A    |    S    |    D    |    F    |    G    |    H    |    J    |    K    |    L    |    ;    |    '    |
// |  SHIFT  |    Z    |    X    |    C    |    V    |    B    |    N    |    M    |    ,    |    .    |    /    |  ENTER  |
// |  CTRL   |    GUI  |    ALT  |    \    |    LOWER|    SPACE          |    RAISE|    LEFT |  RIGHT  |   UP    |  DOWN   |
            bindings = <
    &kp Q      &kp W      &kp E       &kp R              &kp T             &mt F1 N1    &mt F4 N4          &kp Y              &kp U              &kp I        &kp O      &kp P
    &hm LGUI A &hm LALT S &hm LCTL D  &hl NUM_MODS F     &kp G             &mt F2 N2    &mt F5 N5          &kp H              &hl NUM_MODS J     &hm LCTL K   &hm LALT L &mt SQT DQT
    &kp Z      &kp X      &kp C       &kp V              &kp B             &mt F3 N3    &mt F6 N6          &kp N              &kp M              &mt LT COMMA &mt GT DOT &mt QMARK FSLH
    &kp LCTRL  &kp LALT   &kp LCTRL   &lt NUM_MODS BSPC  &mt LSHIFT ESC    &kp TAB      &trans             &tabspace     &lt BT_CTRL ENTER  &kp LALT     &none      &none
            >;
        };

        num_mods {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |   `     |    1    |    2    |    3    |    4    |    5    |    6    |    7    |    8    |    9    |    0    |    DEL  |
// |   TAB   |    F1   |   F2    |   F3    |   F4    |   F5    |   F6    |    -    |   PG_UP |    [    |    ]    |    \    |
// |  SHIFT  |    F7   |   F8    |   F9    |   F10   |   F11   |   F12   |    =    |  PG_DOWN|  HOME   |   END   |  ENTER  |
// |  CTRL   |    GUI  |    ALT  |  RESET  |    LOWER|    SPACE          |    RAISE|    LEFT |  RIGHT  |   UP    |  DOWN   |
            bindings = <
    &mt F7 N7   &mt F8 N8   &mt F9 N9    &kp F11        &kp F12       &none &none   &none        &none        &none        &none        &none
    &mt F4 N4   &mt F5 N5   &mt F6 N6    &none          &none         &none &none   &none        &kp CARET    &none        &none        &mt SEMI COLON
    &mt F1 N1   &mt F2 N2   &mt F3 N3    &mt F10 N0     &none         &none &none   &enie        &none        &kp M        &key_repeat  &trans
    &none       &none       &none        &kp DEL        &kp TAB       &none &none   &trans       &trans       &trans       &none        &none
            >;
        };

        bt_control {
            bindings = <
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none   &none    &kp HOME &kp END    &trans     &kp PSCRN  &trans
    &bt BT_CLR   &trans       &trans       &trans       &trans       &none   &none    &kp LEFT &kp DOWN   &kp UP     &kp RIGHT  &trans
    &bootloader  &trans       &trans       &trans       &trans       &none   &none    &trans   &trans     &trans     &trans     &trans
    &none        &none        &trans       &trans       &trans       &trans  &trans   &trans   &trans     &trans     &none      &none
            >;
        };
    };
};
